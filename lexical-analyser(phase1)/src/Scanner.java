// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.flex

/* this section will be added at the first of java file */
package app;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\2\0\1\10\1\11\1\12\2\10\1\13\1\14"+
    "\1\10\1\15\1\16\1\17\1\20\11\21\1\0\1\10"+
    "\1\6\1\22\1\6\2\0\1\23\3\24\1\25\1\24"+
    "\14\26\1\27\4\26\1\30\2\26\1\10\1\31\2\10"+
    "\1\32\1\0\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\26\1\44\1\45\1\26\1\46"+
    "\1\47\1\50\1\26\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\30\1\57\1\26\1\10\1\60\1\10\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\2\5"+
    "\1\7\3\5\2\10\17\11\1\5\2\1\1\12\1\13"+
    "\1\12\2\0\1\14\1\0\7\11\1\15\14\11\1\0"+
    "\1\16\1\0\2\17\1\0\1\10\7\11\1\15\11\11"+
    "\1\20\1\17\1\0\1\14\2\11\1\15\12\11\1\0"+
    "\1\11\1\15\11\11\1\15\4\11\1\15\2\11\1\15"+
    "\26\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\223\0\223\0\304\0\223"+
    "\0\365\0\223\0\223\0\u0126\0\223\0\u0157\0\u0188\0\u01b9"+
    "\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341"+
    "\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9"+
    "\0\u04fa\0\u052b\0\u055c\0\u058d\0\223\0\223\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u06b3\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\223\0\u0a87\0\223\0\u0ab8\0\u0ae9\0\u0682\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0b1a\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\223"+
    "\0\u05ef\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0e8c\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u0e5b\0\u10d8\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u122f\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1355\0\u1386\0\u13b7\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\1\13\1\20"+
    "\1\21\1\22\1\11\1\23\5\24\2\4\1\24\1\25"+
    "\1\26\1\24\1\27\1\30\2\24\1\31\1\24\1\32"+
    "\1\33\1\24\1\34\1\35\1\36\1\37\1\24\1\40"+
    "\1\41\1\24\1\42\2\43\3\4\24\43\1\44\27\43"+
    "\2\45\3\4\2\45\1\46\21\45\1\47\27\45\63\0"+
    "\1\6\100\0\1\13\47\0\1\13\63\0\1\13\3\0"+
    "\1\21\1\22\1\13\53\0\1\13\2\0\1\21\1\22"+
    "\1\13\51\0\1\50\3\0\1\51\2\0\1\13\54\0"+
    "\1\52\1\0\2\22\6\0\1\53\46\0\1\52\1\0"+
    "\2\22\57\0\2\54\1\0\6\54\1\0\17\54\1\55"+
    "\6\54\21\0\2\54\1\0\6\54\1\0\26\54\21\0"+
    "\2\54\1\0\6\54\1\0\15\54\1\56\1\54\1\57"+
    "\6\54\21\0\2\54\1\0\6\54\1\0\13\54\1\60"+
    "\1\54\1\61\10\54\21\0\2\54\1\0\6\54\1\0"+
    "\13\54\1\62\12\54\21\0\2\54\1\0\6\54\1\0"+
    "\11\54\1\63\3\54\1\64\10\54\21\0\2\54\1\0"+
    "\6\54\1\0\6\54\1\63\5\54\1\65\11\54\21\0"+
    "\2\54\1\0\6\54\1\0\5\54\1\66\7\54\1\67"+
    "\10\54\21\0\2\54\1\0\6\54\1\0\5\54\1\70"+
    "\20\54\21\0\2\54\1\0\6\54\1\0\15\54\1\56"+
    "\1\54\1\71\6\54\21\0\2\54\1\0\6\54\1\0"+
    "\5\54\1\72\7\54\1\73\10\54\21\0\2\54\1\0"+
    "\6\54\1\0\21\54\1\74\4\54\21\0\2\54\1\0"+
    "\6\54\1\0\10\54\1\75\15\54\21\0\2\54\1\0"+
    "\6\54\1\0\15\54\1\76\10\54\21\0\2\54\1\0"+
    "\6\54\1\0\10\54\1\77\15\54\61\0\1\13\12\0"+
    "\1\46\55\0\1\100\2\0\1\46\33\0\1\100\2\0"+
    "\1\100\1\0\1\100\14\0\1\101\36\0\1\101\2\0"+
    "\1\101\1\0\1\101\5\0\13\50\1\102\45\50\2\51"+
    "\1\103\1\51\1\104\54\51\20\0\2\52\3\0\1\105"+
    "\11\0\1\105\41\0\2\106\1\0\3\106\5\0\6\106"+
    "\40\0\2\107\1\0\6\107\1\0\26\107\21\0\2\107"+
    "\1\0\6\107\1\0\17\107\1\110\6\107\21\0\2\107"+
    "\1\0\6\107\1\0\15\107\1\111\10\107\21\0\2\107"+
    "\1\0\6\107\1\0\5\107\1\112\20\107\21\0\2\107"+
    "\1\0\6\107\1\0\1\107\1\113\24\107\21\0\2\107"+
    "\1\0\6\107\1\0\14\107\1\114\11\107\21\0\2\107"+
    "\1\0\6\107\1\0\20\107\1\115\5\107\21\0\2\107"+
    "\1\0\6\107\1\0\17\107\1\116\6\107\21\0\2\107"+
    "\1\0\6\107\1\0\1\117\20\107\1\116\4\107\21\0"+
    "\2\107\1\0\6\107\1\0\14\107\1\116\4\107\1\116"+
    "\4\107\21\0\2\107\1\0\6\107\1\0\15\107\1\120"+
    "\10\107\21\0\2\107\1\0\6\107\1\0\24\107\1\116"+
    "\1\107\21\0\2\107\1\0\6\107\1\0\11\107\1\121"+
    "\14\107\21\0\2\107\1\0\6\107\1\0\1\107\1\111"+
    "\17\107\1\122\4\107\21\0\2\107\1\0\6\107\1\0"+
    "\6\107\1\116\17\107\21\0\2\107\1\0\6\107\1\0"+
    "\1\107\1\123\15\107\1\124\6\107\21\0\2\107\1\0"+
    "\6\107\1\0\5\107\1\125\20\107\21\0\2\107\1\0"+
    "\6\107\1\0\11\107\1\126\14\107\21\0\2\107\1\0"+
    "\6\107\1\0\11\107\1\127\14\107\13\0\1\130\46\0"+
    "\13\50\1\102\3\50\1\131\41\50\2\0\1\103\72\0"+
    "\2\132\2\0\2\133\57\0\2\134\1\0\6\134\1\0"+
    "\26\134\21\0\2\134\1\0\6\134\1\0\1\134\1\135"+
    "\24\134\21\0\2\134\1\0\6\134\1\0\13\134\1\136"+
    "\12\134\21\0\2\134\1\0\6\134\1\0\1\134\1\137"+
    "\24\134\21\0\2\134\1\0\6\134\1\0\20\134\1\140"+
    "\5\134\21\0\2\134\1\0\6\134\1\0\21\134\1\141"+
    "\4\134\21\0\2\134\1\0\6\134\1\0\5\134\1\136"+
    "\20\134\21\0\2\134\1\0\4\134\1\142\1\134\1\0"+
    "\11\134\1\143\14\134\21\0\2\134\1\0\6\134\1\0"+
    "\16\134\1\136\7\134\21\0\2\134\1\0\6\134\1\0"+
    "\14\134\1\144\11\134\21\0\2\134\1\0\6\134\1\0"+
    "\22\134\1\145\3\134\21\0\2\134\1\0\6\134\1\0"+
    "\21\134\1\146\4\134\21\0\2\134\1\0\6\134\1\0"+
    "\11\134\1\147\14\134\21\0\2\134\1\0\6\134\1\0"+
    "\14\134\1\136\11\134\21\0\2\134\1\0\6\134\1\0"+
    "\4\134\1\136\21\134\21\0\2\134\1\0\6\134\1\0"+
    "\13\134\1\150\12\134\15\0\2\151\2\0\2\133\57\0"+
    "\2\133\57\0\2\152\1\0\6\152\1\0\26\152\21\0"+
    "\2\152\1\0\6\152\1\0\25\152\1\153\21\0\2\152"+
    "\1\0\6\152\1\0\12\152\1\153\13\152\21\0\2\152"+
    "\1\0\6\152\1\0\20\152\1\153\5\152\21\0\2\152"+
    "\1\0\6\152\1\0\11\152\1\154\14\152\21\0\2\152"+
    "\1\0\6\152\1\0\21\152\1\155\4\152\21\0\2\152"+
    "\1\0\6\152\1\0\14\152\1\156\11\152\21\0\2\152"+
    "\1\0\6\152\1\0\21\152\1\153\4\152\21\0\2\152"+
    "\1\0\6\152\1\0\17\152\1\157\6\152\21\0\2\152"+
    "\1\0\6\152\1\0\11\152\1\160\14\152\21\0\2\152"+
    "\1\0\6\152\1\0\14\152\1\161\11\152\21\0\2\152"+
    "\1\0\6\152\1\0\5\152\1\153\20\152\21\0\2\162"+
    "\1\0\6\162\1\0\26\162\21\0\2\162\1\0\6\162"+
    "\1\0\14\162\1\163\11\162\21\0\2\162\1\0\6\162"+
    "\1\0\17\162\1\164\6\162\21\0\2\162\1\0\6\162"+
    "\1\0\21\162\1\165\4\162\21\0\2\162\1\0\6\162"+
    "\1\0\14\162\1\165\11\162\21\0\2\162\1\0\6\162"+
    "\1\0\3\162\1\165\22\162\21\0\2\162\1\0\6\162"+
    "\1\0\7\162\1\165\16\162\21\0\2\166\1\0\6\166"+
    "\1\0\26\166\21\0\2\166\1\0\6\166\1\0\22\166"+
    "\1\167\3\166\21\0\2\166\1\0\6\166\1\0\11\166"+
    "\1\170\14\166\21\0\2\171\1\0\6\171\1\0\26\171"+
    "\21\0\2\171\1\0\6\171\1\0\5\171\1\172\20\171"+
    "\21\0\2\171\1\0\6\171\1\0\14\171\1\173\11\171"+
    "\21\0\2\174\1\0\6\174\1\0\26\174\21\0\2\174"+
    "\1\0\6\174\1\0\7\174\1\175\16\174\21\0\2\176"+
    "\1\0\6\176\1\0\26\176\21\0\2\177\1\0\6\177"+
    "\1\0\26\177\21\0\2\200\1\0\6\200\1\0\26\200"+
    "\21\0\2\201\1\0\6\201\1\0\26\201\21\0\2\202"+
    "\1\0\6\202\1\0\26\202\21\0\2\203\1\0\6\203"+
    "\1\0\26\203\21\0\2\204\1\0\6\204\1\0\26\204"+
    "\21\0\2\205\1\0\6\205\1\0\26\205\21\0\2\206"+
    "\1\0\6\206\1\0\26\206\21\0\2\207\1\0\6\207"+
    "\1\0\26\207\21\0\2\210\1\0\6\210\1\0\26\210"+
    "\21\0\2\211\1\0\6\211\1\0\26\211\21\0\2\212"+
    "\1\0\6\212\1\0\26\212\21\0\2\213\1\0\6\213"+
    "\1\0\26\213\21\0\2\214\1\0\6\214\1\0\26\214"+
    "\21\0\2\215\1\0\6\215\1\0\26\215\21\0\2\216"+
    "\1\0\6\216\1\0\26\216\21\0\2\217\1\0\6\217"+
    "\1\0\26\217\21\0\2\220\1\0\6\220\1\0\26\220"+
    "\21\0\2\221\1\0\6\221\1\0\26\221\21\0\2\222"+
    "\1\0\6\222\1\0\26\222\21\0\2\223\1\0\6\223"+
    "\1\0\26\223\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6125];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\27\1\2\11\1\1\2\0\1\1\1\0\24\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\0\22\1\1\11\1\1"+
    "\1\0\16\1\1\0\51\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(yytext(),TokenType.UNDEFINED,yyline,yycolumn);
            }
            // fall through
          case 17: break;
          case 2:
            { return new Symbol(yytext(),TokenType.TAB,yyline,yycolumn);
            }
            // fall through
          case 18: break;
          case 3:
            { return new Symbol("\n",TokenType.NEW_LINE,yyline,yycolumn);
            }
            // fall through
          case 19: break;
          case 4:
            { return new Symbol(yytext(),TokenType.SPACE,yyline,yycolumn);
            }
            // fall through
          case 20: break;
          case 5:
            { return new Symbol(yytext(),TokenType.OPERATOR,yyline,yycolumn);
            }
            // fall through
          case 21: break;
          case 6:
            { yybegin(STRING);return new Symbol(yytext(),TokenType.STRING,yyline,yycolumn);
            }
            // fall through
          case 22: break;
          case 7:
            { yybegin(CHARACTER);return new Symbol(yytext(),TokenType.STRING,yyline,yycolumn);
            }
            // fall through
          case 23: break;
          case 8:
            { return new Symbol(yytext(),TokenType.INTEGER,yyline,yycolumn);
            }
            // fall through
          case 24: break;
          case 9:
            { return new Symbol(yytext(),TokenType.IDENTIFIER,yyline,yycolumn);
            }
            // fall through
          case 25: break;
          case 10:
            { return new Symbol(yytext(),TokenType.STRING,yyline,yycolumn);
            }
            // fall through
          case 26: break;
          case 11:
            { yybegin(YYINITIAL);return new Symbol(yytext(),TokenType.STRING,yyline,yycolumn);
            }
            // fall through
          case 27: break;
          case 12:
            { return new Symbol(yytext(),TokenType.REAL,yyline,yycolumn);
            }
            // fall through
          case 28: break;
          case 13:
            { return new Symbol(yytext(),TokenType.RESERVED,yyline,yycolumn);
            }
            // fall through
          case 29: break;
          case 14:
            { return new Symbol(yytext(),TokenType.SPECIAL,yyline,yycolumn);
            }
            // fall through
          case 30: break;
          case 15:
            { return new Symbol(yytext(),TokenType.COMMENT,yyline,yycolumn);
            }
            // fall through
          case 31: break;
          case 16:
            { String s = yytext();
          System.out.println(s);
          yybegin(YYINITIAL);return new Symbol(s,TokenType.SPECIAL,yyline,yycolumn);
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
